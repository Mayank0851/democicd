name: Pipeline Demo

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m venv env
          source env/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          pip install -r requirements.txt
          pip install pytest 
          pip install httpx
          pytest .

  deploy-stage:
    needs: test  # Ensure tests pass before deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to VM
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.201.55.132 << 'EOF'
          set -e  # Exit on any command failure
      
          # Clone or update the repository
          if [ -d "/home/ubuntu/democicd" ]; then
            echo "Repository exists. Pulling latest changes..."
            cd /home/ubuntu/democicd
            git pull origin main
          else
            echo "Cloning repository..."
            cd /home/ubuntu
            git clone https://github.com/Mayank0851/democicd
            cd democicd
          fi
          if ! command -v docker &> /dev/null
          then 
            echo "docker not found. Installing...."
            sudo apt update 
            sudo apt install -y docker.io 
            sudo systemctl start docker 
            sudo systemctl enable docker 
            echo "docker installed successfully...."
          else
            echo"docker is already installed "

            fi

            sudo docker pull iamyashjain/pipeline:latest 
            sudo docker stop fastapi || true
            sudo docker rm fastapi || true
            sudo docker run -d --name fastapi -p 8080:8080 iamyashjain/pipeline:latest
      
          EOF
